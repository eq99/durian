import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import Password from 'antd/es/input/Password';
import type { RootState, AppThunk } from '../store';
// import { fetchCount } from './counterAPI';

export interface Password {
  id: string
  subject: string
  algo: string
  hash: string
  createdAt: string
}

const initialState: Password[] = [];

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const incrementAsync = createAsyncThunk(
//   'counter/fetchCount',
//   async (amount: number) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );

const passwordSlice = createSlice({
  name: 'password',
  initialState,
  reducers: {
    create: (state, action: PayloadAction<Password>) => {
      state.push(action.payload);
    },
    remove: (state, action: PayloadAction<string>) => {
      state.splice(state.findIndex(item => item.id === action.payload), 1);
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.value += action.payload;
  //     })
  //     .addCase(incrementAsync.rejected, (state) => {
  //       state.status = 'failed';
  //     });
  // },
});


// export const selectPassword = (state: RootState) => state.password;
// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//     (dispatch, getState) => {
//       const currentValue = selectCount(getState());
//       if (currentValue % 2 === 1) {
//         dispatch(incrementByAmount(amount));
//       }
//     };

export default passwordSlice;